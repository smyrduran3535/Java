Öncelikle vector ile başlayalım;

Vector, dinamik bir array (dizi) dir.
Vector, List interface’sinden implement edilmiştir.

Dinamik bir array olmasından dolayı ekleme, silme gibi işlemler esnasında kapasite ve index’lerin durumunu vector halleder.

Örnek olarak,
Vector ilk oluşturulduğunda; capacity (kapasite) değeri 10, size (vector’un içindeki kayıt sayısı) ise 0 değerine sahiptir. Size kapasite değerini geçtiğinde her defasında capacity %100 artacaktır. Bu duruma örnek verecek olursak,
10, 20, 40, … şeklinde ilerleyecektir.


11 numaralı satırda, vector’e hiç ekleme yapılmadığından dolayı değer 0 dır.
12 numaralı satırda ise, vector oluşturulduğundan ilk capacity değeri 10 dur.

Vector’un içine 11 tane kayıt atıldıktan sonra size değeri 11, capacity ise %100 artarak 20 olmuştur.



Yukarıdaki örneğe bakıldığında araya bir tane kayıt eklendi (5. index’e ekleme yapıldı). Yeni kayıttan sonraki tüm kayıtların index’leri otomatik olarak tekrar düzenlendi. Örneğin: 6 değeri 5 numaralı index’ten, 6 numaralı index’e kaydırıldı.

Bu durum silme işlemi için de geçerlidir. Örneğin: 5 değerini silmiş olsaydık, 5 değerinden sonraki tüm kayıtların index değerleri birer yukarı kaydırılacaktı.

Şimdi sıra Array List’te,

Array List, vector gibi List interface’inden türetilmiştir.
Kapasitesi dolduğundan vector gibi %100 değil, %50 artış ile kapasitesini artırır.

Vector, thread safe’ dir. Bundan dolayı yavaştır.
Array List ise thread safe değildir. Bundan dolayı vector’e göre hızlıdır.

Eğer spesifik bir durum yoksa, array list kullanımı daha mantıklıdır.


Klasik programlama eyleminde array (dizi) çok önemli bir rol oynar. Ancak, array’in uzunluğu; yani
bileşenlerinin sayısı array bildiriminde belirleniyor ve bu uzunluk daha sonra değiştirilemiyordu. Bazı
uygulamalarda, bu özelik ciddi bir handikap oluşturur. Java 2, bu sorunu çözmek için Vector sınıfını ve
benzer işi yapan ArrayList sınıfını ortaya koydu. Her iki sınıfta, diziye yeni öğeler eklenir ya da varolan
öğeler silinirse, dizinin uzunluğu kendiliğinden değişir. Tabii, bu değişimin bellek kullanımı ve zaman
açısından bir bedeli (karmaşa – complexity) vardır. Ama, java programcısı bu işleri yapan yordamları
kendisi yazmak zorunda değildir. Vector ya da ArrayList sınıfına ait nesneler bu işleri kendiliğinden
yaparlar.

Vector tipinden dizilerin öğeleri, aynen array tipinde olduğu gibi, birer indise sahiptir. Dolayısyla ,
vector’un öğelerine indisleri ile doğrudan erişim sağlanır.
ArrayList senkronize olmadığı için Vector sınıfına göre daha hızlıdır. Elbette hızlı olmanın bir bedeli
vardır. Senkronize olmaması demek, çoklu işlem ortamında güvenirliğin azalması demektir.
Java 2 sürümünde, Vector sınıfına ArrayList sınıfının bir çok metodu eklendi. Böylece, Vector sınıfı bir
çok uygulamada Array sınıfının yerini aldı.
Vector sınıfı yalnızca nesneler içerebilir; ilkel veri tiplerini içeremez. Đlkel veri tipleri kullanılacaksa,
onların ilgil nesne içine gömülmesi gerekir. Örneğin int tipinden Vector sınıfı tanımlanamaz, ama
Integer sınıfından tanımlanabilir. int veri tipi, Integer sınıfı tarafından sarmalandığı
(wrapping) için, sonunda int tipi içeren Vector sınıfı kullanılabilir.